{"version":3,"file":"static/js/757.eaf63bc4.chunk.js","mappings":"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","sources":["webpack://slim-mom-frontend/./src/pages/RegistrationPage/RegistrationPage.module.css?b753","webpack://slim-mom-frontend/./src/components/RegistrationForm/RegistrationForm.module.css?5637","components/RegistrationForm/RegistrationForm.js","pages/RegistrationPage/RegistrationPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RegistrationPage_container__o9QxY\",\"title\":\"RegistrationPage_title__pXe0V\"};","// extracted by mini-css-extract-plugin\nexport default {\"loginForm\":\"RegistrationForm_loginForm__PNfPw\",\"googleLogo\":\"RegistrationForm_googleLogo__SEq0Y\",\"googleBtn\":\"RegistrationForm_googleBtn__32hWw\",\"formInput\":\"RegistrationForm_formInput__m+H0J\",\"passInput\":\"RegistrationForm_passInput__m655N\",\"btnCont\":\"RegistrationForm_btnCont__GcnzE\",\"pswdVisBtn\":\"RegistrationForm_pswdVisBtn__lIwYN\",\"pswdBtnImg\":\"RegistrationForm_pswdBtnImg__ZD7sr\",\"errorMessage\":\"RegistrationForm_errorMessage__I5ZMQ\"};","import GoogleLogo from '../../images/googleLogo.svg';\nimport eyeOpened from '../../images/eye.svg';\nimport eyeClosed from '../../images/eye-blocked.svg';\nimport { Button } from 'components';\nimport s from './RegistrationForm.module.css';\n\nimport { useDispatch } from 'react-redux';\n\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { useState } from 'react';\n\nimport { handleRegistration, handleGoogleRegistration } from '../../redux/auth/auth-operations';\n\nconst SignupSchema = Yup.object().shape({\n  name: Yup.string().required('Name is required'),\n  email: Yup.string().email('Invalid email').required('Email is required'),\n  password: Yup.string()\n    .min(6, 'Password must contain 6 or more characters!')\n    .required('Password is required'),\n});\n\nconst RegistrationForm = () => {\n  const [isPswdShown, setIsPswdShown] = useState(false);\n\n  const changePswdVisibility = () => {\n    if (isPswdShown === false) {\n      setIsPswdShown(true);\n    }\n    if (isPswdShown === true) {\n      setIsPswdShown(false);\n    }\n  };\n  const dispatch = useDispatch();\n\n  // const login = useGoogleLogin({\n  //   onSuccess: tokenResponse => {\n  //     const data = {\n  //       email: tokenResponse.email,\n  //       password: tokenResponse.id,\n  //     };\n  //     dispatch(authOperations.register(data));\n  //   },\n  // });\n\n  const [errorMessage, setErrorMessage] = useState('');\n\n  return (\n    <>\n      <Formik\n        initialValues={{\n          name: '',\n          email: '',\n          password: '',\n        }}\n        validationSchema={SignupSchema}\n        onSubmit={(values, actions) => {\n          dispatch(handleRegistration(values)).then(a =>\n            setErrorMessage(a?.payload?.response?.data?.message)\n          );\n          actions.resetForm();\n        }}\n      >\n        {({ handleSubmit, errors, touched }) => (\n          <Form className={s.loginForm}>\n            <Field\n              className={s.formInput}\n              type=\"name\"\n              name=\"name\"\n              title=\"Please enter your name or nickname'\"\n              placeholder=\"Name *\"\n              min-length=\"6\"\n              required\n              id=\"name\"\n            />\n            {errors.name && touched.name ? (\n              <div className={s.errorMessage}>* {errors.name}</div>\n            ) : null}\n\n            <Field\n              className={s.formInput}\n              type=\"email\"\n              name=\"email\"\n              title=\"Please enter valid email address, for example  'example@gmail.com'\"\n              placeholder=\"Email *\"\n              min-length=\"6\"\n              required\n              id=\"email\"\n            />\n            {errors.email && touched.email ? (\n              <div className={s.errorMessage}>* {errors.email}</div>\n            ) : null}\n            {errorMessage && !touched.email ? (\n              <div className={s.errorMessage}>{errorMessage}</div>\n            ) : null}\n\n            <Field\n              className={s.formInput + ' ' + s.passInput}\n              type={isPswdShown ? 'text' : 'password'}\n              name=\"password\"\n              title=\"Please enter your password. Minimum length 8 symbols\"\n              placeholder=\"Password *\"\n              min-length=\"8\"\n              required\n              id=\"password\"\n            />\n            <button className={s.pswdVisBtn} onClick={changePswdVisibility} type=\"button\">\n              <img\n                className={s.pswdBtnImg}\n                src={isPswdShown ? eyeOpened : eyeClosed}\n                alt=\"Button show/hide password\"\n              />\n            </button>\n            {errors.password && touched.password ? (\n              <div className={s.errorMessage}>* {errors.password}</div>\n            ) : null}\n            {errorMessage && errorMessage === 'Password is wrong' && !touched.password ? (\n              <div className={s.errorMessage}>{errorMessage}</div>\n            ) : null}\n\n            <div className={s.btnCont}>\n              <Button\n                text={'Register'}\n                width={182}\n                onClick={() => {\n                  handleSubmit();\n                }}\n              />\n\n              <button\n                onClick={() => {\n                  dispatch(handleGoogleRegistration());\n                }}\n                className={s.googleBtn}\n                type=\"button\"\n              >\n                <img src={GoogleLogo} alt=\"Google logo\" />\n              </button>\n            </div>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default RegistrationForm;\n","import s from './RegistrationPage.module.css';\nimport RegistrationForm from 'components/RegistrationForm/RegistrationForm';\n\nconst RegistrationPage = () => {\n  return (\n    <main>\n      <div className={s.container}>\n        <h3 className={s.title}>Register</h3>\n        <RegistrationForm />\n      </div>\n    </main>\n  );\n};\n\nexport default RegistrationPage;\n"],"names":["SignupSchema","Yup","shape","name","required","email","password","min","useState","isPswdShown","setIsPswdShown","changePswdVisibility","dispatch","useDispatch","errorMessage","setErrorMessage","initialValues","validationSchema","onSubmit","values","actions","handleRegistration","then","a","payload","response","data","message","resetForm","handleSubmit","errors","touched","className","s","type","title","placeholder","id","onClick","src","eyeOpened","eyeClosed","alt","text","width","handleGoogleRegistration","GoogleLogo"],"sourceRoot":""}